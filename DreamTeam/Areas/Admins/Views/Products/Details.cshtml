@model DreamTeam.Models.Product.Product

@{
    ViewBag.Title = "Details";
    Layout = "~/Areas/Admins/Views/Shared/_Layout.cshtml";
}


<div class="card card-primary m-2">
    <div class="card-header">
        <h3 class="card-title">Thêm Mới</h3>
    </div>
    <form id="form_put" data-product-id="@Model.Id">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="card-body">
                <div class="form-group">
                    <label for="CategoryId">Loại Sản Phẩm</label>
                    <select required name="CategoryId" class="form-control" id="CategoryId">
                        @foreach (var item in @ViewBag.Categories)
                        {
                            string selected = "";
                            if (@item.GetType().GetProperty("Id").GetValue(@item, null) == Model.CategoryId)
                            {
                                selected = "selected";
                            }
                            <option @selected value="@item.Id">@item.Name ( @item.Brand.Name )</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="row justify-content-around">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Hot, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.Hot)
                        @Html.ValidationMessageFor(model => model.Hot, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.New, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.New)
                        @Html.ValidationMessageFor(model => model.New, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label " })
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OldPrice, htmlAttributes: new { @class = "control-label " })
                    @Html.EditorFor(model => model.OldPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OldPrice, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentPrice, htmlAttributes: new { @class = "control-label " })
                    @Html.EditorFor(model => model.CurrentPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CurrentPrice, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Ordering, htmlAttributes: new { @class = "control-label " })
                    @Html.EditorFor(model => model.Ordering, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Ordering, "", new { @class = "text-danger" })
                </div>
                <div class="card-footer">
                    <button type="reset" class="btn btn-secondary">Reset</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </form>
</div>


<div class="card card-primary m-2">
    <div class="card-header">
        <h3 class="card-title">Thông Tin Thuộc Tính</h3>
    </div>

    <form id="form_attributes_put" data-product-id="@Model.Id">
        <div class="card-body" id="form_attributes">

        </div>
        <div class="card-footer">
            <button type="reset" class="btn btn-secondary">Reset</button>
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </form>
</div>

<div class="card card-primary m-2">
    <div class="card-header">
        <h3 class="card-title">Hình Ảnh Sản Phẩm</h3>
    </div>

    <div class="card card-primary m-2">

        <form id="form_imgs_post" enctype="multipart/form-data" data-product-id="@Model.Id">
            <input type="text" required value="@Model.Id" name="ProductId" hidden>

            <div class="card-body">
                <div class="form-group my-2">
                    <label for="IMAGES_post">Thêm Mới Hình Ảnh</label>
                    <input type="file" accept="image/*" name="IMAGES" class="form-control-file" multiple id="IMAGES_post">
                </div>
            </div>

            <div class="card-footer">
                <button type="reset" class="btn btn-secondary">Reset</button>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </form>
    </div>

    <div class="card-body" id="form_imgs">

    </div>
</div>


@section scripts
{
    <script>
        $(document).ready(() => {
            let route_pro = "api/admin_products/"
            let route_pro_img = "api/admin_product_imgs/"
            let route_pro_attr = "api/admin_product_attributes/"

            loadAttributes(@Model.CategoryId)
            loadPro_Imgs()

            //------ pro attribute
            //---------------------------
            function getPro_Attrs() {
                return JSON.parse(
                    $.ajax({
                        url: route_pro_attr + @Model.Id,
                        method: "GET",
                        async: false
                    }).responseText
                )
            }

            function loadAttributes(cateId) {
                $.ajax({
                    url: "api/admin_attributes/" + cateId,
                    method: "GET",
                    async: false
                }).done(data => {
                    $("#form_attributes div").remove()
                    data.forEach((item) => {
                        let value = ""
                        getPro_Attrs().forEach(item2 => {
                            if (item.Id == item2.AttributeId) {
                                value = item2.Value
                            }
                        })
                        $("#form_attributes").append(`
                        <div class="form-group">
                            <label>${item.Name}</label>
                            <textarea  class="form-control" name="${item.Code}" placeholder="${item.Name}" rows="1" >${value}</textarea>
                        </div>
                        `)
                    })
                }).fail(err => sendMessage(err.responseJSON.Message, "fail"))
            }


            //---- pro images
            //-------------------------------------------------
            function loadPro_Imgs() {
            $.ajax({
                url: route_pro_img + @Model.Id,
                method: "GET",
                async: false
            }).done(data => {
                $("#form_imgs table").remove()
                data.forEach((item) => {
                    item.Name = `<img width=100px class="image m-auto" src="${item.Name}" alt="${item.Name}" />`
                })
                $("#form_imgs").append(
                    createTable(
                        data,
                        ["Hình Ảnh", "Active", "Ordering"],
                        [
                            ["Name", 1],
                            ["Active", 2],
                            ["Ordering",3]
                        ],
                        true, false,true
                    )
                )
            })
                .fail((err) => {
                    sendMessage(err.responseJSON.Message,"fail")
                })
            }

            $(document).on("click", ".btn_delete", (e) => {
                e.preventDefault()
                let tar = $(e.currentTarget);
                $.ajax({
                    url: route_pro_img + tar.attr("value"),
                    method: "DELETE"
                }).done(() => {
                    sendMessage("Đã lưu thay đổi!", "done")
                    loadPro_Imgs()
                }).fail((err) => {
                    sendMessage(err.responseJSON.Message, "fail")
                })
            })

            $(document).on("click", ".btn_save", (e) => {
                e.preventDefault()
                let tar = $(e.currentTarget);
                putOne(tar.attr("value"), {
                    Ordering: $(`.Ordering.${tar.attr("value")}`).val(),
                }, route_pro_img).done(() => {
                    sendMessage("Đã lưu thay đổi!", "done")
                    loadPro_Imgs()
                }).fail((err) => {
                    sendMessage(err.responseJSON.Message, "fail")
                })
            })


            $(document).on("click", ".Active", (e) => {
                e.preventDefault();
                let tar = $(e.currentTarget);
                putOne(tar.attr("value"), { Active: !(tar.text() == "true") }, route_pro_img).done(() => {
                    sendMessage("Đã lưu thay đổi!", "done")
                    changeBackgroundBoolOne(tar)
                }).fail((err) => {
                    sendMessage(err.responseJSON.Message, "fail")
                })
            });

            //--- Form Submit
            //----------------------------
            $("#form_put").submit((e) => {
                e.preventDefault()
                let tar = $(e.target)
                let data = tar.serializeFormJSON()
                if (data.Active[0] == "true") {
                    data.Active = true
                }
                if (data.Hot[0] == "true") {
                    data.Hot = true
                }
                if (data.New[0] == "true") {
                    data.New = true
                }
                putOne(tar.attr("data-product-id"),
                    data
                    , route_pro).done(() => {
                        sendMessage("Đã lưu thay đổi!", "done")
                        loadAttributes($("#CategoryId").val())
                    }).fail((err) => {
                        sendMessage(err.responseJSON.Message, "fail")
                    })
            })

            $("#form_attributes_put").submit((e) => {
                e.preventDefault()
                let tar = $(e.target)
                putOne(tar.attr("data-product-id"),
                    tar.serializeFormJSON()
                    , route_pro_attr).done(() => {
                        sendMessage("Đã lưu thay đổi!", "done")
                    }).fail((err) => {
                        sendMessage(err.responseJSON.Message, "fail")
                    })
            })

            $("#form_imgs_post").on("submit", (e) => {
                e.preventDefault()
                $.ajax({
                    url: route_pro_img,
                    method: "POST",
                    data: new FormData($("#form_imgs_post")[0]),
                    processData: false,
                    contentType: false,
                }).done(() => {
                    loadPro_Imgs()
                    sendMessage("Đã thêm mới thành công!", "done")
                })
                    .fail((err) => {
                        sendMessage(err.responseJSON.Message, "fail")
                    })
            })



        })
    </script>
}